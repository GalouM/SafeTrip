apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'jacoco-android'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.gms.google-services'

jacoco {
    toolVersion = '0.8.3'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.galou.watchmyback"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        dataBinding {
            enabled = true
        }
    }
    lintOptions {
        abortOnError false
    }

    android {
        sourceSets {
            String largeTestDir = 'src/largeTest/java'
            test {
                java.srcDir largeTestDir
            }
            androidTest {
                java.srcDir largeTestDir
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', "AppName", appName)
        }
        debug {
            testCoverageEnabled true
            buildConfigField('String', "AppName", appName)
        }
    }

    testOptions {
        execution 'ANDROID_TEST_ORCHESTRATOR'
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
    sourceSets {
        main {
            java.srcDirs = ['src/main/java', 'src/androidTest/java/largeTest', 'src/androidTest/largeTest/java/', 'src/largeTest/java/']
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.annotation:annotation:$rootProject.annotationVersion"

    //DESIGN
    implementation 'com.google.android.material:material:1.2.0-alpha01'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //ROOM
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"

    //GLIDE
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    //GSON
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    //JUNIT TEST
    testImplementation "junit:junit:$rootProject.jUnitVersion"
    testImplementation "androidx.test:core:$rootProject.testCoreVersion"
    testImplementation "androidx.test.ext:junit:$rootProject.testJUnitVersion"
    testImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC3'
    testImplementation "com.google.truth:truth:$rootProject.truthVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.archTestingVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.robolectricVersion"
    testImplementation "org.koin:koin-test:$rootProject.koinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    testImplementation "androidx.test:core-ktx:$rootProject.androidXTestCoreVersion"
    testImplementation "androidx.test.ext:junit-ktx:$rootProject.androidXTestExtKotlinRunnerVersion"
    testImplementation "androidx.test:rules:$rootProject.androidXTestRulesVersion"

    androidTestUtil "androidx.test:orchestrator:$rootProject.testOrchestrorVersion"

    //INSTRUMENTED TEST
    androidTestImplementation("org.koin:koin-test:$rootProject.koinVersion") {
        exclude group: 'org.mockito'
    }
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ruleVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoCoreVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerAndroidVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.androidxArchVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.archLifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"

    //Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navVersion"

    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"

    //MULTIDEX
    implementation "androidx.multidex:multidex:$rootProject.multidexVersion"

    //KOIN
    implementation "org.koin:koin-android-viewmodel:$rootProject.koinVersion"

    //FIREBASE
    implementation "com.google.firebase:firebase-auth:$rootProject.firebaseAuthVersion"
    implementation "com.firebaseui:firebase-ui-auth:$rootProject.authUIVersion"
    implementation "com.google.firebase:firebase-firestore:$rootProject.firestoreVersion"
    implementation "com.google.firebase:firebase-storage:$rootProject.firebaseStorageVersion"

    //EASY PERMISSIONS
    implementation "pub.devrel:easypermissions:$rootProject.easyPermVersion"

    //KOTLIN
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "androidx.core:core-ktx:$rootProject.coreKtxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

task customJacocoTestReport(type: JacocoReport, dependsOn: 'test') {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
    def debugTree = fileTree(dir: "$project.buildDir/tmp/kotlin-classes/debug", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/kotlin"

    sourceDirectories.from = mainSrc
    additionalSourceDirs.from = debugTree
    additionalSourceDirs.from = fileTree(dir: project.buildDir, includes: [
            'jacoco/testDebugUnitTest.exec', 'outputs/code-coverage/connected/*coverage.ec'
    ])
}
