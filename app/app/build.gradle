apply plugin: 'com.android.application'

apply plugin: 'kotlin-android'

apply plugin: 'kotlin-android-extensions'

apply plugin: 'jacoco-android'

apply plugin: 'kotlin-kapt'

apply plugin: 'com.google.gms.google-services'

jacoco {
    toolVersion = '0.8.3'
}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}


android {
    compileSdkVersion 29
    defaultConfig {
        applicationId "com.galou.watchmyback"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true
        dataBinding {
            enabled = true
        }
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField('String', "AppName", appName)
        }
        debug {
            testCoverageEnabled true
            buildConfigField('String', "AppName", appName)
        }
    }

    testOptions {
        animationsDisabled = true
        unitTests {
            includeAndroidResources = true
            returnDefaultValues = true
        }
        unitTests.all {
            jacoco {
                includeNoLocationClasses = true
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    kapt "androidx.annotation:annotation:$rootProject.annotationVersion"

    //DESIGN
    implementation 'com.google.android.material:material:1.2.0-alpha01'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'androidx.gridlayout:gridlayout:1.0.0'
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'

    //ROOM
    implementation "androidx.room:room-runtime:$rootProject.roomVersion"
    implementation "androidx.room:room-ktx:$rootProject.roomVersion"
    implementation "androidx.room:room-rxjava2:$rootProject.roomVersion"
    kapt "androidx.room:room-compiler:$rootProject.roomVersion"
    androidTestImplementation "androidx.room:room-testing:$rootProject.roomVersion"

    //GLIDE
    implementation "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    kapt "com.github.bumptech.glide:compiler:$rootProject.glideVersion"

    //GSON
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"

    //JUNIT TEST
    testImplementation "junit:junit:$rootProject.jUnitVersion"
    testImplementation "androidx.test:core:$rootProject.testCoreVersion"
    testImplementation "androidx.test.ext:junit:$rootProject.testJUnitVersion"
    testImplementation "androidx.test:runner:$rootProject.testRunnerVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation 'com.nhaarman.mockitokotlin2:mockito-kotlin:2.0.0-RC3'
    testImplementation "com.google.truth:truth:$rootProject.truthVersion"
    testImplementation "androidx.arch.core:core-testing:$rootProject.archTestingVersion"
    testImplementation "org.robolectric:robolectric:$rootProject.robolectricVersion"
    testImplementation "org.koin:koin-test:$rootProject.koinVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    testImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    testImplementation "junit:junit:$rootProject.junitVersion"

    //INSTRUMENTED TEST
    androidTestImplementation ("org.koin:koin-test:$rootProject.koinVersion") { exclude group: 'org.mockito' }
    androidTestImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    androidTestImplementation "org.mockito:mockito-android:$rootProject.mockitoVersion"
    androidTestImplementation "androidx.test:rules:$rootProject.ruleVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoCoreVersion"
    androidTestImplementation "androidx.test.espresso:espresso-contrib:$rootProject.espressoCoreVersion"
    androidTestImplementation "org.jetbrains.kotlinx:kotlinx-coroutines-test:$rootProject.coroutinesVersion"
    androidTestImplementation "androidx.test:runner:$rootProject.testRunnerAndroidVersion"
    androidTestImplementation "androidx.test.espresso:espresso-core:$rootProject.espressoVersion"

    // Lifecycle components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.archLifecycleVersion"
    androidTestImplementation "androidx.arch.core:core-testing:$rootProject.androidxArchVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$rootProject.archLifecycleVersion"
    kapt "androidx.lifecycle:lifecycle-compiler:$rootProject.archLifecycleVersion"

    //Navigation Component
    implementation "androidx.navigation:navigation-fragment-ktx:$rootProject.navVersion"
    implementation "androidx.navigation:navigation-ui-ktx:$rootProject.navVersion"

    implementation "androidx.fragment:fragment-ktx:$rootProject.fragmentVersion"

    //MULTIDEX
    implementation "androidx.multidex:multidex:$rootProject.multidexVersion"

    //KOIN
    implementation "org.koin:koin-android-viewmodel:$rootProject.koinVersion"

    //FIREBASE
    implementation "com.google.firebase:firebase-auth:$rootProject.firebaseAuthVersion"
    implementation "com.firebaseui:firebase-ui-auth:$rootProject.authUIVersion"
    implementation "com.google.firebase:firebase-firestore:$rootProject.firestoreVersion"
    implementation "com.google.firebase:firebase-storage:$rootProject.firebaseStorageVersion"

    //EASY PERMISSIONS
    implementation "pub.devrel:easypermissions:$rootProject.easyPermVersion"

    //KOTLIN
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$rootProject.coroutinesVersion"
    implementation "androidx.core:core-ktx:$rootProject.coreKtxVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
}

project.afterEvaluate {
    //Gather build type and product flavor names in a list
    def buildTypes = android.buildTypes.collect { type -> type.name }
    def productFlavors = android.productFlavors.collect { flavor -> flavor.name }
    if (!productFlavors) productFlavors.add('')

    productFlavors.each { productFlavorName ->
        buildTypes.each { buildTypeName ->

            //Define the sourceName and the sourcePath.
            def sourceName, sourcePath
            if (!productFlavorName) {
                sourceName = sourcePath = "${buildTypeName}"
            } else {
                sourceName = "${productFlavorName}${buildTypeName.capitalize()}"
                sourcePath = "${productFlavorName}/${buildTypeName}"
            }

            def testTaskName = "test${sourceName.capitalize()}UnitTest"

            task "create${sourceName.capitalize()}UnitTestCoverageReport"(type: JacocoReport, dependsOn: "$testTaskName") {

                group = "Reporting"
                description =
                        "Generate Jacoco coverage reports on the ${sourceName.capitalize()} build."

                reports {
                    xml.enabled true
                    html.enabled true
                }

                //Directory where the compiled class files are
                def fileFilter = [ '**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*' ]
                def debugTree = fileTree(dir: "${project.buildDir}/tmp/kotlin-classes/${sourcePath}",
                        excludes: ['**/R.class',
                                   '**/BR.class',
                                   '**/R$*.class',
                                   '**/*$ViewInjector*.*',
                                   '**/*$ViewBinder*.*',
                                   '**/BuildConfig.*',
                                   'android/**',
                                   '**/Manifest*.*',
                                   '**/*$Lambda$*.*',
                                   '**/*_Provide*Factory*.*',
                                   '**/*Activity.class',
                                   '**/com/galou/watchmyback/di/*.*',
                                   '**/com/galou/watchmyback/utils/pictureUtils.kt',
                                   '**/com/galou/watchmyback/utils/FireStoreUtils.kt',
                                   '**/com/galou/watchmyback/utils/TypeImage.class',
                                   '**/com/galou/watchmyback/utils/WatchMyBackAppGlide.class',
                                   '**/*$*$*.*' // Anonymous classes generated by kotlin
                        ])
                def mainSrc = ["src/main/kotlin",
                               "src/$productFlavorName/kotlin",
                               "src/$buildTypeName/kotlin"]

                sourceDirectories.from = files(mainSrc)
                classDirectories.from = files([debugTree])
                executionData.from = files("${project.buildDir}/jacoco/${testTaskName}.exec")
            }
        }
    }
}
